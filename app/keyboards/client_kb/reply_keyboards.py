from aiogram.types import KeyboardButton, ReplyKeyboardMarkup


class RKB:
    """Class with reply keyboard functions."""

    @staticmethod
    async def main_commands(notification: bool = False) -> ReplyKeyboardMarkup:
        keyboards = [
            [KeyboardButton(text="üìë –ü—Ä–∞–≤–∏–ª–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞")],
            [KeyboardButton(text="üìù –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–æ–∑—ã–≥—Ä—ã—à")],
            [KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")],
        ]

        if notification:
            keyboards.append([KeyboardButton(text="üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")])

        else:
            keyboards.append([KeyboardButton(text="üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")])

        return ReplyKeyboardMarkup(resize_keyboard=True, keyboard=keyboards)

    @staticmethod
    async def back() -> ReplyKeyboardMarkup:
        return ReplyKeyboardMarkup(
            resize_keyboard=True,
            keyboard=[[KeyboardButton(text="üîñ –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
        )

    @staticmethod
    async def back_or_lottery() -> ReplyKeyboardMarkup:
        return ReplyKeyboardMarkup(
            resize_keyboard=True,
            keyboard=[
                [KeyboardButton(text="üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à")],
                [KeyboardButton(text="üîñ –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
            ],
        )

    @staticmethod
    async def concan() -> ReplyKeyboardMarkup:
        return ReplyKeyboardMarkup(
            resize_keyboard=True,
            keyboard=[
                [KeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")],
                [KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å")]
            ],
        )
