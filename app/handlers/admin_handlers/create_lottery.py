from datetime import datetime

import pytz
from aiogram import F, Router, exceptions
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from app.database.bot_functions import check_lottery, get_users_ids_and_notifications, set_data_lottery
from app.dispatcher import bot
from app.filters import IsAdmin
from app.fsm import FSMAdmin
from app.keyboards.admin_kb import IKB, RKB
from app.scheduler.functions import start_interval_lottery
from app.texts.functions import send_message_to_user
from app.texts.texts import CLIENTS_TEXTS

router = Router()


@router.message(Command("clet"), IsAdmin())
@router.message(F.text.in_(["üéâ –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à"]), IsAdmin())
async def command_clet_handling(message: Message, state: FSMContext) -> None:
    await message.delete()
    await state.update_data(start_il=0)

    if await check_lottery():
        text = "<b><i>–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à ‚ö™Ô∏è</i></b>"
        await message.answer(text=text, reply_markup=await RKB.back())
        return

    await state.set_state(FSMAdmin.clet_1)

    text = "–°–ø–µ—Ä–≤–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞:"
    await message.answer(text=text, reply_markup=await RKB.back())


@router.message(FSMAdmin.clet_1, IsAdmin())
async def clet_1(message: Message, state: FSMContext) -> None:
    if message.photo:
        photo = message.photo[-1].file_id

    else:
        await message.answer(text="<b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üü°</b>",
                             reply_markup=await RKB.back())
        return

    await state.set_state(FSMAdmin.clet_2)
    await state.update_data(photo=photo)

    text = "–ê —Ç–µ–ø–µ—Ä—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞:"
    await message.answer(text=text, reply_markup=await RKB.back())


@router.message(FSMAdmin.clet_2, IsAdmin())
async def clet_2(message: Message, state: FSMContext) -> None:
    if message.text is None:
        await message.answer(text="<b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üü°</b>",
                             reply_markup=await RKB.back())
        return

    text = message.md_text

    data = await state.get_data()
    photo = data.get("photo", "")

    try:
        if photo:
            await message.answer_photo(photo=photo, caption=text, parse_mode=ParseMode.MARKDOWN_V2)

        else:
            await message.answer(text=text, parse_mode=ParseMode.MARKDOWN_V2)

    except exceptions.TelegramBadRequest:
        await message.answer(text="<b>–¢–µ–∫—Å—Ç –ø–æ–¥ –∫–∞—Ä—Ç–∏–Ω–∫–æ–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üü°</b>",
                             reply_markup=await RKB.back())
        return

    await state.update_data(text=text)
    await state.set_state(FSMAdmin.clet_3)

    text = "–ê —Ç–µ–ø–µ—Ä—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–º–µ—Ä–∫–æ–≤ (–Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –±–æ–ª—å—à–µ 0):"
    await message.answer(text=text, reply_markup=await RKB.back())


@router.message(FSMAdmin.clet_3, IsAdmin())
async def clet_3(message: Message, state: FSMContext) -> None:
    if message.text is None:
        await message.answer(text="<b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üü°</b>",
                             reply_markup=await RKB.back())
        return

    elif not message.text.isdigit() or int(message.text) <= 0:  # noqa: RET505
        await message.answer(text="<b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üü°</b>",
                             reply_markup=await RKB.back())
        return

    await state.set_state(FSMAdmin.clet_4)
    await state.update_data(count=int(message.text))

    text = "–ê —Ç–µ–ø–µ—Ä—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–Ω—ã—Ö –Ω–æ–º–µ—Ä–∫–æ–≤ (–Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –±–æ–ª—å—à–µ 0):"
    await message.answer(text=text, reply_markup=await RKB.back())


@router.message(FSMAdmin.clet_4, IsAdmin())
async def clet_4(message: Message, state: FSMContext) -> None:
    if message.text is None:
        await message.answer(text="<b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üü°</b>",
                             reply_markup=await RKB.back())
        return

    elif not message.text.isdigit() or int(message.text) <= 0:  # noqa: RET505
        await message.answer(text="<b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üü°</b>",
                             reply_markup=await RKB.back())
        return

    await state.set_state(FSMAdmin.clet_5)
    await state.update_data(win_numbers_amount=int(message.text))

    text = "–ê —Ç–µ–ø–µ—Ä—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–µ–Ω—É –æ–¥–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∫–∞ (—Ä—É–±–ª–∏, –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –±–æ–ª—å—à–µ 0):"
    await message.answer(text=text, reply_markup=await RKB.back())


@router.message(FSMAdmin.clet_5, IsAdmin())
async def clet_5(message: Message, state: FSMContext) -> None:
    if message.text is None:
        await message.answer(text="<b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üü°</b>",
                             reply_markup=await RKB.back())
        return
    elif not message.text.isdigit() or int(message.text) <= 0:  # noqa: RET505
        await message.answer(text="<b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üü°</b>",
                             reply_markup=await RKB.back())
        return

    await state.set_state(FSMAdmin.clet_6)
    await state.update_data(price=int(message.text))

    data = await state.get_data()
    photo = data.get("photo")
    text = data.get("text")
    count = int(data.get("count"))
    user_numbers = ["–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–æ–º–µ—Ä–∫–æ–≤"]
    win_numbers_amount = data.get("win_numbers_amount")
    price = int(data.get("price"))

    await message.answer_photo(photo=photo,
                               caption=text,
                               parse_mode=ParseMode.MARKDOWN_V2,
                               reply_markup=await IKB.clet_test(count=count,
                                                                user_numbers=user_numbers,
                                                                state=state,
                                                                price=price))

    text = (f"–ê —Ç–µ–ø–µ—Ä—å, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞, –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ. –í–æ—Ç –¥–∞–Ω–Ω—ã–µ:\n\n"
            f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–º–µ—Ä–∫–æ–≤: <i>{count}</i>\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–Ω—ã—Ö –Ω–æ–º–µ—Ä–∫–æ–≤: <i>{win_numbers_amount}</i>\n"
            f"–¶–µ–Ω–∞ –æ–¥–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∫–∞: <i>{price}</i>")
    await message.answer(text=text, reply_markup=await RKB.concan())


@router.callback_query(lambda query: query.data in ["test<", "test>", "test<<"] or query.data.startswith("test:"),
                       IsAdmin(), FSMAdmin.clet_6)
async def query_clet_6(query: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    start = data.get("start_il", 0)
    count = int(data.get("count"))
    user_numbers = ["–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–æ–º–µ—Ä–∫–æ–≤"]
    price = int(data.get("price"))

    if query.data.startswith("test:"):
        number = int(query.data.split(":")[1])

        await query.message.edit_reply_markup(
            reply_markup=await IKB.clet_test_p(
                count=count,
                number=number,
                state=state,
                price=price)
        )

    elif query.data == "test<":
        if start == 0 or count <= 9:  # noqa: PLR2004
            await bot.answer_callback_query(callback_query_id=query.id)
            return

        await query.message.edit_reply_markup(
            reply_markup=await IKB.clet_test(
                count=count,
                user_numbers=user_numbers,
                state=state,
                flag=False,
                price=price)
        )

    elif query.data == "test<<":
        await query.message.edit_reply_markup(
            reply_markup=await IKB.clet_test(
                count=count,
                user_numbers=user_numbers,
                state=state,
                flag=False,
                price=price)
        )

    elif query.data == "test>":
        if start == count or count - start <= 9:  # noqa: PLR2004
            await bot.answer_callback_query(callback_query_id=query.id)
            return

        await query.message.edit_reply_markup(
            reply_markup=await IKB.clet_test(
                count=count, user_numbers=user_numbers, state=state, flag=True, price=price)
        )


@router.callback_query(IsAdmin(), lambda query: query.data == "passive")
async def other_clet_6(query: CallbackQuery) -> None:
    await bot.answer_callback_query(callback_query_id=query.id)


@router.message(F.text.in_(["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–û—Ç–º–µ–Ω–∏—Ç—å"]), IsAdmin(), FSMAdmin.clet_6)
async def clet_6(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    text = data.get("text")
    photo = data.get("photo")
    count = int(data.get("count"))
    price = int(data.get("price"))
    win_numbers_amount = data.get("win_numbers_amount")

    await state.set_state(FSMAdmin.passive)

    if message.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        moscow_tz = pytz.timezone("Europe/Moscow")
        date = datetime.now(tz=moscow_tz).strftime("%Y-%m-%d %H:%M:%S")

        await set_data_lottery(text=text,
                               photo_id=photo,
                               numbers_amount=count,
                               price=price,
                               win_numbers_amount=win_numbers_amount,
                               date=date)

        text = "<i><b>üéâ –†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω üü¢</b></i>"
        markup = await RKB.main_commands()

        await message.answer(text=text, reply_markup=markup)

        await start_interval_lottery()

        name = "lottery_created_client"
        text = CLIENTS_TEXTS[name]

        users = await get_users_ids_and_notifications()

        if not users:
            return

        for user in users:
            user_id = user[0]
            notification = user[1]

            if notification:
                await send_message_to_user(chat_id=user_id,
                                           name=name,
                                           text=text,
                                           state=state)

    else:
        text = "<b><i>üéâ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ üî¥</i></b>"
        markup = await RKB.main_commands()

        await message.answer(text=text, reply_markup=markup)
