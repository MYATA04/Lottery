import os
from datetime import datetime

import pytz
from aiogram import F, Router
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile, Message

from app.database.bot_functions import check_lottery, get_all_users_ids, get_data_lottery, get_all_users
from app.filters import IsAdmin
from app.fsm import FSMAdmin
from app.keyboards.admin_kb import RKB
from app.texts.functions import get_message, set_message

router = Router()


@router.message(CommandStart(), IsAdmin())
@router.message(F.text.in_(["üîñ –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "–û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ"]), IsAdmin())
async def command_start_handling(message: Message, state: FSMContext) -> None:
    await message.delete()

    await state.set_state(FSMAdmin.passive)

    text = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å - {message.from_user.full_name} üü° üü¢ üî¥ ‚ö™Ô∏è\n\nüóÇ –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:"
    name = "start_admin"
    photo_path = "medias/start_admin.png"
    markup = await RKB.main_commands()

    data = await get_message(name)

    if data is None:
        photo = FSInputFile(os.path.abspath(photo_path))  # noqa: PTH100
        var = await message.answer_photo(photo=photo, caption=text, reply_markup=markup)
        photo_id = var.photo[-1].file_id

        await set_message(name=name, text="", photo=photo_id)

    else:
        photo = data["photo"]

        await message.answer_photo(photo=photo, caption=text, reply_markup=markup)


@router.message(Command("help"), IsAdmin())
@router.message(F.text == "üÜò –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º", IsAdmin())
async def command_help_handling(message: Message, state: FSMContext) -> None:
    await message.delete()

    await state.set_state(FSMAdmin.passive)

    text = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å - {message.from_user.full_name} üü° üü¢ üî¥ ‚ö™Ô∏è\n\nüóÇ –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
    name = "help_admin"
    photo_path = "medias/help_admin.png"
    markup = await RKB.main_commands()

    data = await get_message(name)

    if data is None:
        photo = FSInputFile(os.path.abspath(photo_path))  # noqa: PTH100
        var = await message.answer_photo(photo=photo, caption=text, reply_markup=markup)
        photo_id = var.photo[-1].file_id

        await set_message(name=name, text="", photo=photo_id)

    else:
        photo = data["photo"]

        await message.answer_photo(photo=photo, caption=text, reply_markup=markup)

    text = (
        ".    <code>üéâ –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à</code> - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à, –±–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç —É –≤–∞—Å —Å–ø–µ—Ä–≤–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É —Ç–æ–≤–∞—Ä–∞, "
        "–ø–æ—Å–ª–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–ª–∏ –±–µ–∑, –ø–æ—Å–ª–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–º–µ—Ä–∫–æ–≤, –ø–æ—Å–ª–µ —Ü–µ–Ω—É –Ω–æ–º–µ—Ä–∫–∞, –ø–æ—Å–ª–µ "
        "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π, –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞. –≠—Ç–æ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è "
        "–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω –¥–∞–∂–µ –∞–¥–º–∏–Ω. –í—ã–∏–≥—Ä—ã—à–Ω—ã–µ –Ω–æ–º–µ—Ä–∫–∏ –≤—ã–±–µ—Ä—É—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –∏ –ø–æ—Å–ª–µ "
        "–∫–æ–Ω—Ü–∞ –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–∫–æ–≤, –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–≤–µ–¥–æ–º–∏—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π, –∞ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–º –ø–æ–∂–µ–ª–∞–µ—Ç —É–¥–∞—á–∏, –∞ –∞–¥–º–∏–Ω–∞–º "
        "–æ—Ç–ø—Ä–∞–≤–∏—Ç ID –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π, –∏—Ö @username, –∏—Ö –ø–æ–ª–Ω–æ–µ –∏–º—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ. –ü–æ—Å–ª–µ, "
        "–±–æ—Ç —É –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –ø–æ–ø—Ä–æ—Å–∏—Ç –∞–¥—Ä–µ—Å, –ø–æ–ª—É—á–∏–≤ –µ–≥–æ, –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º –±–æ—Ç–∞, –≤–º–µ—Å—Ç–µ —Å ID, @username, "
        "–ø–æ–ª–Ω—ã–º –∏–º–µ–Ω–µ–º.\n\n"
        "      <code>üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç–∞ –±–æ—Ç–∞</code> - –∏–∑–º–µ–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Ç–µ–∫—Å—Ç–∞ –±–æ—Ç–∞, –∫–∞–∫ –Ω–∞–ø—Ä–∏–º–µ—Ä, "
        "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ (/start –∫–æ–º–∞–Ω–¥–∞), –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º (/help), —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ "
        "–æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º, –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–º. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Ç–µ–∫—Å—Ç–∞ –º–æ–∂–Ω–æ "
        '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É /set_text –∏–ª–∏ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–æ–º–∞–Ω–¥—É —Å–Ω–∏–∑—É - "üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç–∞ –±–æ—Ç–∞".\n\n'
        "      <code>‚úâÔ∏è –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞</code> - —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞, —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏–ª–∏ –±–µ–∑.\n\n"
        "      <code>üè∑ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</code> - —Ä–∞—Å—Å—ã–ª–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏–ª–∏ –±–µ–∑, "
        "–æ—Ç–ø—Ä–∞–≤–∏–≤ –±–æ—Ç—É ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n"
        "      <code>üóÉ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</code> - –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ –∏ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞.\n\n"
    )

    await message.answer(text=text)


@router.message(Command("get_logs"), IsAdmin())
async def command_get_logs_handling(message: Message, state: FSMContext) -> None:
    await message.delete()

    await state.set_state(FSMAdmin.passive)

    path = os.path.abspath("logger/logs/")  # noqa: PTH100

    list_ = os.listdir(path)

    for file in list_:
        document = FSInputFile(path + "\\" + file, filename=file[:-3] + ".log")
        await message.answer_document(document=document)

    path = os.path.abspath("database/bot_db.db")  # noqa: PTH100
    moscow_tz = pytz.timezone("Europe/Moscow")
    date = datetime.now(tz=moscow_tz).strftime("%d_%m_%Y")
    document = FSInputFile(path, filename=f"{date}.db")
    await message.answer_document(document=document)


@router.message(Command("statistics"), IsAdmin())
@router.message(F.text == "üóÉ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", IsAdmin())
async def command_statistics_handling(message: Message, state: FSMContext) -> None:
    await message.delete()

    await state.set_state(FSMAdmin.passive)

    users_count = len(await get_all_users_ids())

    if users_count == 0:
        text = "<b>–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ‚ö™Ô∏è</b>\n\n"

    else:
        text = f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞: <i>{users_count}</i>\n\n"

    check = await check_lottery()

    if check:
        data = await get_data_lottery()
        photo = data["photo"]
        text_lottery = data["text"]
        text += (
            f"<b>–î–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∞</b>:\n"
            f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞: <i>{data["date"]}</i>\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–º–µ—Ä–∫–æ–≤: <i>{data["numbers_amount"]}</i>\n"
            f"–£–∂–µ –∫—É–ø–ª–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∫–∏: <i>{" | ".join(data["purchased"].split(","))}</i>\n"
            f"–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∫–∏: <i>{" | ".join(data["booked"].split(","))}</i>\n"
            f"–¶–µ–Ω–∞ –æ–¥–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∫–∞: <i>{data["price"]}</i> ‚ÇΩ"
        )

        await message.answer(text=text,
                             reply_markup=await RKB.back())

        if data["purchased"]:
            purchased = list(map(int, (data['purchased'].split(","))))  # –ö—É–ø–ª–µ–Ω–Ω—ã–µ. –ü—Ä–∏–º–µ—Ä: [1, 2, 3]

            text_p = "<b>–í–ª–∞–¥–µ–ª—å—Ü—ã –Ω–æ–º–µ—Ä–∫–æ–≤:</b>\n"

            users = await get_all_users()

            for number in purchased:
                for user in users:
                    if not user['numbers']:
                        continue

                    user_numbers = list(map(int, (user['numbers'].split(","))))

                    if number in user_numbers:
                        text_p += (f"\n\t–ù–æ–º–µ—Ä–æ–∫ \"{number}\": {user['id']} - <code>{user['username']}</code> - "
                                   f"{user['fullname']} - <code>{user['phone']}</code>")

            await message.answer(text=text)

        await message.answer_photo(photo=photo,
                                   caption=text_lottery,
                                   parse_mode=ParseMode.MARKDOWN_V2)

    else:
        text += "<b>–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –Ω–µ—Ç ‚ö™Ô∏è</b>"

        await message.answer(text=text,
                             reply_markup=await RKB.back())


@router.message(F.text == "üìù –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞", IsAdmin())
@router.message(Command("edit_text"), IsAdmin())
async def command_edit_text_handling(message: Message, state: FSMContext) -> None:
    await message.delete()

    await state.set_state(FSMAdmin.edit_text_1)

    text = "üìù –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:"

    await message.answer(text=text, reply_markup=await RKB.edit_text())
