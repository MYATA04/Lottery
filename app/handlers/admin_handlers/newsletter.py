from aiogram import F, Router, exceptions
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from app.database.bot_functions import check_user_notification, get_users_ids_and_notifications
from app.dispatcher import bot
from app.filters import IsAdmin
from app.fsm import FSMAdmin
from app.keyboards.admin_kb import RKB
from app.texts.functions import newsletter

router = Router()


@router.message(Command("nlet_all"), IsAdmin())
@router.message(F.text.in_(["‚úâÔ∏è –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞"]), IsAdmin())
async def command_nlet_all_handling(message: Message, state: FSMContext) -> None:
    """Handle command - /nlet_all, Handle text - ‚úâÔ∏è –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞."""
    await message.delete()

    await state.set_state(FSMAdmin.nlet_all_1)

    text = ('–°–ø–µ—Ä–≤–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è. '
            '–≠—Ç–æ—Ç –ø—É–Ω–∫—Ç –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –Ω–∞–∂–∞–≤ —Å–Ω–∏–∑—É –Ω–∞ –∫–Ω–æ–ø–∫—É "<code>–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è≠</code>".')
    await message.answer(text=text, reply_markup=await RKB.skip())


@router.message(FSMAdmin.nlet_all_1, IsAdmin())
async def nlet_all_1(message: Message, state: FSMContext) -> None:
    if message.photo:
        photo = message.photo[-1].file_id
    elif message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è≠":
        photo = ""
    else:
        await message.answer(text="<b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üü°</b>",
                             reply_markup=await RKB.back())
        return

    await state.set_state(FSMAdmin.nlet_all_2)
    await state.update_data(photo=photo)

    text = "–ê —Ç–µ–ø–µ—Ä—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:"
    await message.answer(text=text, reply_markup=await RKB.back())


@router.message(FSMAdmin.nlet_all_2, IsAdmin())
async def nlet_all_2(message: Message, state: FSMContext) -> None:
    if message.text is None:
        await message.answer(text="<b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üü°</b>",
                             reply_markup=await RKB.back())
        return

    text = message.md_text

    data = await state.get_data()
    photo = data.get("photo", "")

    try:
        if photo:
            await message.answer_photo(photo=photo, caption=text, parse_mode=ParseMode.MARKDOWN_V2)
        else:
            await message.answer(text=text, parse_mode=ParseMode.MARKDOWN_V2)

    except exceptions.TelegramBadRequest:
        await message.answer(text="<b>–¢–µ–∫—Å—Ç –ø–æ–¥ –∫–∞—Ä—Ç–∏–Ω–∫–æ–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üü°</b>",
                             reply_markup=await RKB.back())
        return

    await state.update_data(text=text)
    await state.set_state(FSMAdmin.nlet_all_3)

    text = "–ê —Ç–µ–ø–µ—Ä—å, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É, –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ:"

    await message.answer(text=text, reply_markup=await RKB.concan())


@router.message(F.text.in_(["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–û—Ç–º–µ–Ω–∏—Ç—å"]), IsAdmin(), FSMAdmin.nlet_all_3)
async def nlet_all_3(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    text_nlet = data.get("text")
    photo = data.get("photo", "")

    await state.set_state(FSMAdmin.passive)

    if message.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        text = "<i><b>‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å . . . ‚ö™Ô∏è</b></i>"
        markup = await RKB.main_commands()

        await message.answer(text=text, reply_markup=markup)

        users = await get_users_ids_and_notifications()

        if not users:
            await message.answer(text="<b><i>–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üî¥</i></b>",
                                 reply_markup=await RKB.back())
            return

        flag = await newsletter(chat_ids=users, text=text_nlet, photo=photo)

        if photo:
            await message.answer_photo(photo=photo, caption=text_nlet)
        else:
            await message.answer(text=text)

        if flag:
            text = "<i><b>‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ üü¢</b></i>"
        else:
            text = "<b><i>‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –±–µ–∑—É—Å–ø–µ—à–Ω–æ üî¥</i></b>"

        await message.answer(text=text, reply_markup=markup)

    else:
        text = "<b><i>‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ üî¥</i></b>"
        markup = await RKB.main_commands()

        await message.answer(text=text, reply_markup=markup)


@router.message(Command("nlet_one"), IsAdmin())
@router.message(F.text.in_(["üè∑ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"]), IsAdmin())
async def command_nlet_one_handling(message: Message, state: FSMContext) -> None:
    """Handle command - /nlet_one, Handle text - üè∑ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    await message.delete()

    await state.set_state(FSMAdmin.nlet_one_1)

    text = "–°–ø–µ—Ä–≤–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID —Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:"
    await message.answer(text=text, reply_markup=await RKB.back())


@router.message(FSMAdmin.nlet_one_1, IsAdmin())
async def nlet_one_1(message: Message, state: FSMContext) -> None:
    try:
        await bot.get_chat(message.text)

    except exceptions.TelegramBadRequest:
        await message.answer(text="<b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üü°</b>",
                             reply_markup=await RKB.back())
        return

    user_id = message.text

    await state.set_state(FSMAdmin.nlet_one_2)
    await state.update_data(user_id=user_id)

    text = ("–ê —Ç–µ–ø–µ—Ä—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è. "
            '–≠—Ç–æ—Ç –ø—É–Ω–∫—Ç –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –Ω–∞–∂–∞–≤ —Å–Ω–∏–∑—É –Ω–∞ –∫–Ω–æ–ø–∫—É "<code>–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è≠</code>".')

    await message.answer(text=text, reply_markup=await RKB.skip())


@router.message(FSMAdmin.nlet_one_2, IsAdmin())
async def nlet_one_2(message: Message, state: FSMContext) -> None:
    if message.photo:
        photo = message.photo[-1].file_id
    elif message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è≠":
        photo = ""
    else:
        await message.answer(text="<b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üü°</b>",
                             reply_markup=await RKB.back())
        return

    await state.set_state(FSMAdmin.nlet_one_3)
    await state.update_data(photo=photo)

    text = "–ê —Ç–µ–ø–µ—Ä—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:"
    await message.answer(text=text, reply_markup=await RKB.back())


@router.message(FSMAdmin.nlet_one_3, IsAdmin())
async def nlet_one_3(message: Message, state: FSMContext) -> None:
    if message.text is None:
        await message.answer(text="<b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üü°</b>",
                             reply_markup=await RKB.back())
        return

    text = message.md_text

    data = await state.get_data()
    photo = data.get("photo", "")

    try:
        if photo:
            await message.answer_photo(photo=photo, caption=text, parse_mode=ParseMode.MARKDOWN_V2)
        else:
            await message.answer(text=text, parse_mode=ParseMode.MARKDOWN_V2)

    except exceptions.TelegramBadRequest:
        await message.answer(text="<b>–¢–µ–∫—Å—Ç –ø–æ–¥ –∫–∞—Ä—Ç–∏–Ω–∫–æ–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üü°</b>",
                             reply_markup=await RKB.back())
        return

    await state.update_data(text=text)
    await state.set_state(FSMAdmin.nlet_one_4)

    text = "–ê —Ç–µ–ø–µ—Ä—å, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É, –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ:"

    await message.answer(text=text, reply_markup=await RKB.concan())


@router.message(F.text.in_(["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–û—Ç–º–µ–Ω–∏—Ç—å"]), IsAdmin(), FSMAdmin.nlet_one_4)
async def nlet_one_4(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    text_nlet = data.get("text")
    photo = data.get("photo", "")
    user_id = data.get("user_id")

    await state.set_state(FSMAdmin.passive)

    if message.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        text = "<i><b>üè∑ –ò–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é . . . ‚ö™Ô∏è</b></i>"
        markup = await RKB.main_commands()

        await message.answer(text=text, reply_markup=markup)

        user_notification = await check_user_notification(user_id=user_id)

        if user_notification is None:
            await message.answer(text="<b><i>üè∑ –¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö üî¥</i></b>",
                                 reply_markup=await RKB.back())
            return

        flag = await newsletter(chat_ids=[user_id, user_notification], text=text_nlet, photo=photo)

        if flag:
            text = "<i><b>üè∑ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ üü¢</b></i>"
        else:
            text = "<b><i>üè∑ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –±–µ–∑—É—Å–ø–µ—à–Ω–æ üî¥</i></b>"

        await message.answer(text=text, reply_markup=markup)

    else:
        text = "<b><i>üè∑ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ üî¥</i></b>"
        markup = await RKB.main_commands()

        await message.answer(text=text, reply_markup=markup)
