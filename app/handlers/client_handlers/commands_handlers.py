import contextlib

from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from app.database.bot_functions import check_user_notification, set_user_notification, update_booked_lottery_numbers
from app.filters import IsClient
from app.fsm import FSMClient
from app.keyboards.client_kb import RKB
from app.texts.functions import deleter, send_message_to_user
from app.texts.texts import CLIENTS_TEXTS

router = Router()


@router.message(CommandStart(), IsClient())
@router.message(F.text.in_(["üîñ –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]), IsClient())
async def command_start_handling(message: Message, state: FSMContext) -> None:
    await deleter(message=message, state=state)
    await state.set_state(FSMClient.passive)

    data = await state.get_data()
    with contextlib.suppress(TypeError):
        number = int(data.get("number"))

        with contextlib.suppress(ValueError):
            await update_booked_lottery_numbers(number=number, type_append=False)

    name = "start_client"
    text = CLIENTS_TEXTS[name]

    photo_path = "medias/start_admin.png"
    notification = await check_user_notification(message.from_user.id)
    markup = await RKB.main_commands(notification)

    await send_message_to_user(chat_id=message.chat.id,
                               name=name,
                               text=text,
                               photo_path=photo_path,
                               markup=markup,
                               state=state)


@router.message(F.text == "üìë –ü—Ä–∞–≤–∏–ª–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞", IsClient(), FSMClient.passive)
async def rules_lottery(message: Message, state: FSMContext) -> None:
    await deleter(message=message, state=state)

    name = "rules_client"
    text = CLIENTS_TEXTS[name]

    markup = await RKB.back()

    await send_message_to_user(chat_id=message.chat.id,
                               name=name,
                               text=text,
                               markup=markup,
                               state=state)


@router.message(F.text == "üìù –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–æ–∑—ã–≥—Ä—ã—à", IsClient(), FSMClient.passive)
async def active_lottery(message: Message, state: FSMContext) -> None:
    await deleter(message=message, state=state)

    text = ('–ï—Å–ª–∏ –≤—ã –µ—â–µ –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–ª–∏ "<code>üìë –ü—Ä–∞–≤–∏–ª–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞</code>", –Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –µ–≥–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å, '
            "—ç—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ üü° üü° üü° –í –∏ –Ω–æ–º —Å–ª—É—á–∞–µ, —É –≤–∞—Å –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à–∞. –í—ã –º–æ–∂–µ—Ç–µ "
            '–ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–∏–≤ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É "<code>üîñ –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</code>"')
    markup = await RKB.back_or_lottery()

    await send_message_to_user(chat_id=message.chat.id,
                               text=text,
                               markup=markup,
                               state=state)


@router.message(F.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", IsClient(), FSMClient.passive)
async def admins_contacts(message: Message, state: FSMContext) -> None:
    await deleter(message=message, state=state)

    name = "admins_contacts_client"
    text = CLIENTS_TEXTS[name]

    markup = await RKB.back()

    await send_message_to_user(chat_id=message.chat.id,
                               name=name,
                               text=text,
                               markup=markup,
                               state=state)


@router.message(F.text.in_(["üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"]), IsClient(), FSMClient.passive)
async def notifications_handle(message: Message, state: FSMContext) -> None:
    await deleter(message=message, state=state)

    if message.text == "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
        text = ("üîî –¢–µ–ø–µ—Ä—å –≤–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Ä–∞—Å—Å—ã–ª–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ —Ç–∞–∫ –∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, "
                "—á—Ç–æ —Å–æ–∑–¥–∞–ª—Å—è –Ω–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à üü¢")

        await set_user_notification(message.from_user.id, notification=True)

    else:
        text = ("üîï –¢–µ–ø–µ—Ä—å –≤–∞–º –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Ä–∞—Å—Å—ã–ª–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ —Ç–∞–∫ –∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ "
                "—Ç–æ–º, —á—Ç–æ —Å–æ–∑–¥–∞–ª—Å—è –Ω–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à üî¥")

        await set_user_notification(message.from_user.id, notification=False)

    markup = await RKB.back()

    await send_message_to_user(chat_id=message.chat.id,
                               text=text,
                               markup=markup,
                               state=state)
